text = element_text(family = "Barlow"),
plot.background = element_rect(fill = plot_bg_color, linetype = 0, colour = NA),
panel.background = element_rect(fill = panel_bg_color, linetype = 0, colour = NA),
plot.title = ggplot2::element_text(
color = title_text_color,
size = ggplot2::rel(1.2),
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.subtitle = ggplot2::element_text(
color = other_text_color,
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.caption = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8),
margin = margin(t = half_line)
),
axis.title = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"
),
axis.text = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.8),
margin = ggplot2::margin()
),
axis.text.y = ggplot2::element_text(margin = ggplot2::margin(r = -0.8 * half_line / 2), hjust = 1),
axis.line = ggplot2::element_line(
colour = grid_line_color,
size = grid_line_size
),
axis.line.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.length = ggplot2::unit(0.5,"char"),
panel.grid.major.y = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = spec_legend_position,
legend.justification = legend_justification_spec,
legend.direction = spec_legend_direction,
legend.title = ggplot2::element_text(hjust = 0,
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"),
legend.spacing.x = ggplot2::unit(1, "char"),
legend.text = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8)
),
legend.margin = ggplot2::margin(),
legend.box.spacing = legend_box_spacing_spec,
plot.margin = ggplot2::margin(1,1,1,1, unit = "char"),
plot.title.position = "plot",
plot.caption.position = "plot",
complete = TRUE
)
}
library(tidyverse)
library(nycflights13)
flight_demo = flights %>%
group_by(carrier) %>%
summarise(num_flights = n())
ggplot(flight_demo, aes(x=carrier, y = num_flights))+
geom_col() +
coord_flip() +
nn_basic_theme()
nn_basic_theme <- function(legend_right = FALSE,
base_size = 12,
base_family = "",
base_line_size = base_size / 170,
base_rect_size = base_size / 170) {
#library(showtext)
avail_font_families = sysfonts::font_families()
if(!("Barlow" %in% avail_font_families)){
sysfonts::font_add_google(name = "Barlow", family = "Barlow")
}
showtext.auto()
half_line <- base_size/2
grid_line_color <- nn_colors("NN Midnight")
grid_line_size <- 0.2
title_text_color <- nn_colors("NN Midnight")
other_text_color <- nn_colors("NN Midnight")
plot_bg_color <- nn_colors("NN Harbor")
panel_bg_color <- nn_colors("NN Harbor")
if(legend_right == TRUE){
spec_legend_position <- "right"
spec_legend_direction <- "vertical"
legend_justification_spec <- "center"
legend_box_spacing_spec = ggplot2::unit(2 * half_line, "pt")
} else {
spec_legend_position <- "top"
spec_legend_direction <- "horizontal"
legend_justification_spec <- c(0,0)
legend_box_spacing_spec <- ggplot2::unit(0, "char")
}
ggplot2::theme_minimal(base_size = base_size,
base_family = base_family,
base_line_size = base_line_size) %+replace%
ggplot2::theme(
text = element_text(family = "Barlow"),
plot.background = element_rect(fill = plot_bg_color, linetype = 0, colour = NA),
panel.background = element_rect(fill = panel_bg_color, linetype = 0, colour = NA),
plot.title = ggplot2::element_text(
color = title_text_color,
size = ggplot2::rel(1.2),
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.subtitle = ggplot2::element_text(
color = other_text_color,
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.caption = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8),
margin = margin(t = half_line)
),
axis.title = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"
),
axis.text = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.8),
margin = ggplot2::margin()
),
axis.text.y = ggplot2::element_text(margin = ggplot2::margin(r = -0.8 * half_line / 2), hjust = 1),
axis.line = ggplot2::element_line(
colour = grid_line_color,
size = grid_line_size
),
axis.line.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.length = ggplot2::unit(0.5,"char"),
panel.grid.major.y = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = spec_legend_position,
legend.justification = legend_justification_spec,
legend.direction = spec_legend_direction,
legend.title = ggplot2::element_text(hjust = 0,
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"),
legend.spacing.x = ggplot2::unit(1, "char"),
legend.text = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8)
),
legend.margin = ggplot2::margin(),
legend.box.spacing = legend_box_spacing_spec,
plot.margin = ggplot2::margin(1,1,1,1, unit = "char"),
plot.title.position = "plot",
plot.caption.position = "plot",
complete = TRUE
)
}
library(tidyverse)
library(nycflights13)
flight_demo = flights %>%
group_by(carrier) %>%
summarise(num_flights = n())
ggplot(flight_demo, aes(x=carrier, y = num_flights))+
geom_col() +
coord_flip() +
nn_basic_theme()
nn_basic_theme <- function(legend_right = FALSE,
base_size = 12,
base_family = "",
base_line_size = base_size / 170,
base_rect_size = base_size / 170) {
#library(showtext)
avail_font_families = sysfonts::font_families()
if(!("Barlow" %in% avail_font_families)){
sysfonts::font_add_google(name = "Barlow", family = "Barlow")
}
showtext_auto()
half_line <- base_size/2
grid_line_color <- nn_colors("NN Midnight")
grid_line_size <- 0.2
title_text_color <- nn_colors("NN Midnight")
other_text_color <- nn_colors("NN Midnight")
plot_bg_color <- nn_colors("NN Harbor")
panel_bg_color <- nn_colors("NN Harbor")
if(legend_right == TRUE){
spec_legend_position <- "right"
spec_legend_direction <- "vertical"
legend_justification_spec <- "center"
legend_box_spacing_spec = ggplot2::unit(2 * half_line, "pt")
} else {
spec_legend_position <- "top"
spec_legend_direction <- "horizontal"
legend_justification_spec <- c(0,0)
legend_box_spacing_spec <- ggplot2::unit(0, "char")
}
ggplot2::theme_minimal(base_size = base_size,
base_family = base_family,
base_line_size = base_line_size) %+replace%
ggplot2::theme(
text = element_text(family = "Barlow"),
plot.background = element_rect(fill = plot_bg_color, linetype = 0, colour = NA),
panel.background = element_rect(fill = panel_bg_color, linetype = 0, colour = NA),
plot.title = ggplot2::element_text(
color = title_text_color,
size = ggplot2::rel(1.2),
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.subtitle = ggplot2::element_text(
color = other_text_color,
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.caption = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8),
margin = margin(t = half_line)
),
axis.title = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"
),
axis.text = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.8),
margin = ggplot2::margin()
),
axis.text.y = ggplot2::element_text(margin = ggplot2::margin(r = -0.8 * half_line / 2), hjust = 1),
axis.line = ggplot2::element_line(
colour = grid_line_color,
size = grid_line_size
),
axis.line.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.length = ggplot2::unit(0.5,"char"),
panel.grid.major.y = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = spec_legend_position,
legend.justification = legend_justification_spec,
legend.direction = spec_legend_direction,
legend.title = ggplot2::element_text(hjust = 0,
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"),
legend.spacing.x = ggplot2::unit(1, "char"),
legend.text = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8)
),
legend.margin = ggplot2::margin(),
legend.box.spacing = legend_box_spacing_spec,
plot.margin = ggplot2::margin(1,1,1,1, unit = "char"),
plot.title.position = "plot",
plot.caption.position = "plot",
complete = TRUE
)
}
library(tidyverse)
library(nycflights13)
flight_demo = flights %>%
group_by(carrier) %>%
summarise(num_flights = n())
ggplot(flight_demo, aes(x=carrier, y = num_flights))+
geom_col() +
coord_flip() +
nn_basic_theme()
ggplot(flight_demo, aes(x=carrier, y = num_flights))+
geom_col() +
coord_flip() +
nn_basic_theme()+
labs(y = "Number of Flights", x = "Carrier")
nn_basic_theme <- function(legend_right = FALSE,
base_size = 12,
base_family = "",
base_line_size = base_size / 170,
base_rect_size = base_size / 170) {
#library(showtext)
avail_font_families = sysfonts::font_families()
if(!("Barlow" %in% avail_font_families)){
sysfonts::font_add_google(name = "Barlow", family = "Barlow")
}
showtext_auto()
half_line <- base_size/2
grid_line_color <- nn_colors("NN Midnight")
grid_line_size <- 0.2
title_text_color <- nn_colors("NN Midnight")
other_text_color <- nn_colors("NN Midnight")
plot_bg_color <- nn_colors("NN Harbor")
panel_bg_color <- nn_colors("NN Harbor")
if(legend_right == TRUE){
spec_legend_position <- "right"
spec_legend_direction <- "vertical"
legend_justification_spec <- "center"
legend_box_spacing_spec = ggplot2::unit(2 * half_line, "pt")
} else {
spec_legend_position <- "top"
spec_legend_direction <- "horizontal"
legend_justification_spec <- c(0,0)
legend_box_spacing_spec <- ggplot2::unit(0, "char")
}
ggplot2::theme_minimal(base_size = base_size,
base_family = base_family,
base_line_size = base_line_size) %+replace%
ggplot2::theme(
text = element_text(family = "Barlow"),
plot.background = element_rect(fill = plot_bg_color, linetype = 0, colour = NA),
panel.background = element_rect(fill = panel_bg_color, linetype = 0, colour = NA),
plot.title = ggplot2::element_text(
color = title_text_color,
size = ggplot2::rel(1.2),
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.subtitle = ggplot2::element_text(
color = other_text_color,
face = "bold",
hjust = 0,
margin = ggplot2::margin(b = half_line)
),
plot.caption = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8),
margin = margin(t = half_line)
),
axis.title = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"
),
axis.text = ggplot2::element_text(
color = other_text_color,
size = ggplot2::rel(0.8),
margin = ggplot2::margin()
),
axis.text.y = ggplot2::element_text(margin = ggplot2::margin(r = -0.8 * half_line / 2), hjust = 1),
axis.line = ggplot2::element_line(
colour = grid_line_color,
size = grid_line_size
),
axis.line.y = ggplot2::element_blank(),
axis.ticks = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.length = ggplot2::unit(0.5,"char"),
panel.grid.major.y = ggplot2::element_line(
color = grid_line_color,
size = grid_line_size
),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
legend.position = spec_legend_position,
legend.justification = legend_justification_spec,
legend.direction = spec_legend_direction,
legend.title = ggplot2::element_text(hjust = 0,
color = other_text_color,
size = ggplot2::rel(0.9),
face = "bold"),
legend.spacing.x = ggplot2::unit(1, "char"),
legend.text = ggplot2::element_text(
color = other_text_color,
hjust = 0,
size = ggplot2::rel(0.8)
),
legend.margin = ggplot2::margin(),
legend.box.spacing = legend_box_spacing_spec,
plot.margin = ggplot2::margin(1,1,1,1, unit = "char"),
plot.title.position = "plot",
plot.caption.position = "plot",
complete = TRUE
)
}
nn_colors("NN Blue")
nn_colors("NN Blue")
nn_colors()
library(nntools)
pkgdown::build_site()
library(nntools)
pkgdown::build_site()
library(nntools)
pkgdown::build_site()
nn_colors("NN White")
nn_base_color_palette = tribble(
~color_name, ~hex_code, ~color_category,
'NN Blue','#006d9d', 'Primary',
'NN Teal',	'#00a4b9',	'Accent',
'NN Gold',	'#fbab18',	'Accent',
'NN Red',	'#d63f3e',	'Accent',
'NN Mauve',	'#d74341',	'Accent',
'NN Midnight',	'#002934',	'Background',
'NN Harbor',	'#ebebeb',	'Background',
'NN Black',	'#000000',	'Background',
'NN White',	'#FFFFFF',	'Background',
'NN Sky',	'#d74341',	'Supplemental',
'NN Green',	'#4ea652',	'Supplemental',
'NN Pear',	'#ccc72c',	'Supplemental',
'NN Lemon',	'#ffcb05',	'Supplemental',
'NN Carrot',	'#f47d20',	'Supplemental',
'NN Magenta',	'#cc3d72',	'Supplemental',
'NN Pink',	'#f597b2',	'Supplemental',
'NN Purple',	'#915ea6',	'Supplemental',
'NN Chestnut',	'#644a49',	'Supplemental'
)
library(nntools)
nn_base_color_palette
nn_colors("NN White")
usethis::use_data(internal = TRUE)
nn_mono_pal_data = read_rds("inst/extdata/parsed_mono_pal_data.rds")
nn_mono_pal_data = readr::read_rds("inst/extdata/parsed_mono_pal_data.rds")
usethis::use_data(nn_mono_pal_data,internal = TRUE)
nn_mono_pal_data = readr::read_rds("inst/extdata/parsed_mono_pal_data.rds")
usethis::use_data(nn_mono_pal_data,internal = TRUE,overwrite = TRUE)
View(nn_mono_pal_data)
library(tidyverse)
library(scales)
nn_mono_pal_data
palette_name = "Blue"
#Check if palette name is available
check <- nn_mono_pal_data %>%
filter(str_to_lower(color_palette_name) == str_to_lower(palette_name))
View(check)
#Check if palette name is available
sub_pal_data <- nn_mono_pal_data %>%
filter(str_to_lower(color_palette_name) == str_to_lower(palette_name))
View(sub_pal_data)
uq_pal_names = unique(nn_mono_pal_data$color_palette_name)
stop(
paste0("The palette name you reference is not available. Please select from the following palettes: ",
stringr::str_flatten(uq_pal_names,collapse = ", "))
)
num_colors = 5
ordered_hex_codes = sub_pal_data %>%
arrange(sort_order) %>%
pull(hex_code)
grDevices::colorRampPalette(ordered_hex_codes)(num_colors)
show_col(grDevices::colorRampPalette(ordered_hex_codes)(num_colors))
show_col(sub_pal_data$hex_code)
max_colors = nrow(sub_pal_data)
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
library(nntools)
devtools::build()
## code to prepare `nn_base_color_palette` dataset goes here
nn_base_color_palette = tibble::tribble(
~color_name, ~hex_code, ~color_category,
'NN Blue','#006d9d', 'Primary',
'NN Teal',	'#00a4b9',	'Accent',
'NN Gold',	'#fbab18',	'Accent',
'NN Red',	'#d63f3e',	'Accent',
'NN Mauve',	'#a1486f',	'Accent',
'NN Midnight',	'#002934',	'Background',
'NN Harbor',	'#ebebeb',	'Background',
'NN Black',	'#000000',	'Background',
'NN White',	'#FFFFFF',	'Background',
'NN Sky',	'#33a8df',	'Supplemental',
'NN Green',	'#4ea652',	'Supplemental',
'NN Pear',	'#ccc72c',	'Supplemental',
'NN Lemon',	'#ffcb05',	'Supplemental',
'NN Carrot',	'#f47d20',	'Supplemental',
'NN Magenta',	'#cc3d72',	'Supplemental',
'NN Pink',	'#f597b2',	'Supplemental',
'NN Purple',	'#915ea6',	'Supplemental',
'NN Chestnut',	'#644a49',	'Supplemental'
)
usethis::use_data(nn_base_color_palette, overwrite = TRUE)
library(nntools)
